// 库操作————分支管理

git checkout -b 分支名（eg: master）
git switch -c 分支名
// 切换（-b：创建）到该分支

git branch
// 查看当前分支

git merge 分支名
// 合并

git branch 分支名
// 创建分支

git branch -d 分支名
// 删除该分支


git log --graph
// 查看分支合并图


git merge --no-ff -m "deciration" 分支名
// master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活
// master 各稳定版本
// dev 多方协作堆放文件
// 。。。 各自分支
// bug 各bug

git stash
// 将工作区的未提交部分压入栈中，用于中断解决bug

git stash list
// 查看栈

git stash apply  +   git stash drop
// 恢复未提交内容+删除栈中内容

git stash pop
// 弹栈

git stash apply stash@{0}
// 恢复指定栈内容

git cherry-pick bug的commitid 
// 在其他分支上修改已修改过的bug

// 使用feature分支进行新功能的调试、合并，然后合并到dev，最后发布到master

// 一般master和dev需要推送到远程仓库，其他的看情况

git push origin dev
// 推送到远程仓库dev中

// clone时一般只能看到master分支

git checkout -b dev origin/dev
// 创建远程仓库的dev分支

git pull
// 抓取最新提交的dev，之后可以合并然后再推送

git branch --set-upstream-to=origin/dev dev
// git pull失败时，可能是没有链接到dev，先用上面语句，在pull

git rebase
// pull之后，push之前使用，将曲线历史记录变成直线

以下详情请看try5.txt